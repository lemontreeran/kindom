# source: https://us1.prisma.sh/public-gravelcloud-78/kingdom/dev
# timestamp: Wed Feb 27 2019 22:47:52 GMT+1100 (Australian Eastern Daylight Time)

type AggregateUser {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  deleteUser(where: UserWhereUniqueInput!): User
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Query {
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  user(where: UserWhereUniqueInput!): User
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Subscription {
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User implements Node {
  id: ID!
  username: String!
  kinAccount: String!
  kinSeed: String!
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  username: String!
  kinAccount: String!
  kinSeed: String!
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  username_ASC
  username_DESC
  kinAccount_ASC
  kinAccount_DESC
  kinSeed_ASC
  kinSeed_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserPreviousValues {
  id: ID!
  username: String!
  kinAccount: String!
  kinSeed: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  username: String
  kinAccount: String
  kinSeed: String
}

input UserUpdateManyMutationInput {
  username: String
  kinAccount: String
  kinSeed: String
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  username: String

  """All values that are not equal to given value."""
  username_not: String

  """All values that are contained in given list."""
  username_in: [String!]

  """All values that are not contained in given list."""
  username_not_in: [String!]

  """All values less than the given value."""
  username_lt: String

  """All values less than or equal the given value."""
  username_lte: String

  """All values greater than the given value."""
  username_gt: String

  """All values greater than or equal the given value."""
  username_gte: String

  """All values containing the given string."""
  username_contains: String

  """All values not containing the given string."""
  username_not_contains: String

  """All values starting with the given string."""
  username_starts_with: String

  """All values not starting with the given string."""
  username_not_starts_with: String

  """All values ending with the given string."""
  username_ends_with: String

  """All values not ending with the given string."""
  username_not_ends_with: String
  kinAccount: String

  """All values that are not equal to given value."""
  kinAccount_not: String

  """All values that are contained in given list."""
  kinAccount_in: [String!]

  """All values that are not contained in given list."""
  kinAccount_not_in: [String!]

  """All values less than the given value."""
  kinAccount_lt: String

  """All values less than or equal the given value."""
  kinAccount_lte: String

  """All values greater than the given value."""
  kinAccount_gt: String

  """All values greater than or equal the given value."""
  kinAccount_gte: String

  """All values containing the given string."""
  kinAccount_contains: String

  """All values not containing the given string."""
  kinAccount_not_contains: String

  """All values starting with the given string."""
  kinAccount_starts_with: String

  """All values not starting with the given string."""
  kinAccount_not_starts_with: String

  """All values ending with the given string."""
  kinAccount_ends_with: String

  """All values not ending with the given string."""
  kinAccount_not_ends_with: String
  kinSeed: String

  """All values that are not equal to given value."""
  kinSeed_not: String

  """All values that are contained in given list."""
  kinSeed_in: [String!]

  """All values that are not contained in given list."""
  kinSeed_not_in: [String!]

  """All values less than the given value."""
  kinSeed_lt: String

  """All values less than or equal the given value."""
  kinSeed_lte: String

  """All values greater than the given value."""
  kinSeed_gt: String

  """All values greater than or equal the given value."""
  kinSeed_gte: String

  """All values containing the given string."""
  kinSeed_contains: String

  """All values not containing the given string."""
  kinSeed_not_contains: String

  """All values starting with the given string."""
  kinSeed_starts_with: String

  """All values not starting with the given string."""
  kinSeed_not_starts_with: String

  """All values ending with the given string."""
  kinSeed_ends_with: String

  """All values not ending with the given string."""
  kinSeed_not_ends_with: String
}

input UserWhereUniqueInput {
  id: ID
  username: String
}
